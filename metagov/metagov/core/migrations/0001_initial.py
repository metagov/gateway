# Generated by Django 3.1.5 on 2021-03-21 22:57

from django.db import migrations, models
import django.db.models.deletion
import metagov.core.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('name', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('readable_name', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DataStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_store', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='GovernanceProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True, validators=[metagov.core.models.validate_process_name])),
                ('callback_url', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('created', 'CREATED'), ('pending', 'PENDING'), ('completed', 'COMPLETED')], default='created', max_length=15)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('errors', models.JSONField(blank=True, default=dict)),
                ('outcome', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Plugin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of the plugin', max_length=30)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Configuration for this plugin instance', null=True)),
                ('community', models.ForeignKey(help_text='Community that this plugin instance belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='plugins', to='core.community')),
                ('data', models.OneToOneField(help_text='Datastore to persist any data', on_delete=django.db.models.deletion.CASCADE, to='core.datastore')),
            ],
            options={
                'unique_together': {('name', 'community')},
            },
        ),
    ]
